# using  and / or / not  between small conditions
if x ==3 and y ==56 :
    print("it works")
else:
    print("it fails")

# Demorgan's Law
# not(x and y)  == (not x) or (not y)
# not (x or y)  == (not x) and (not y)


# presidece of conditional operatos
# conditional/comparison operators
# not
# and 
# or

"""
In Python, the precedence of the logical operators is not, and, then or.

This means that the compound condition True and not False or not True would be evaluated as (True and (not False)) or (not True).

"""

"""
De Morgan's laws state that not (x and y) == not x or not y and not (x or y) == not x and not y. Applying these laws, you can simplify the condition one step at a time:

not(x and not (y and z))
= (not x) or (not (not (y and z)))
= (not x) or (y and z)

"""

"""
X Y
F F
T F
F F
T F

X Y Z
F F F
T F F 
F T F
T T F
F F T
T F T
F T T
T T T

"""

"""
Assume that three variables x, y, and z are always equal to either True or False, respectively. This means that there are eight unique combinations of values for x, y, and z.

How many of these eight combinations make the following expression evaluate to True?
x and y or z

ans: 5
"""

"""
w = True  # <- Change this
x = True  # <- Change this
y = False  # <- Change this
z = True  # <- Change this

# Don't change any of these `condition_` variables.
condition_1 = w and x and not y or not z # Z is true
condition_2 = not (w and not w)  # here also expression should be false so w is True
condition_3 = not (w and y or y)  # expression should result false then only condition_3 is true so y is false
condition_4 = x and (y or z and w)  # indirectly here "x" is true

# All of these should print `True`.
print(condition_1)
print(condition_2)
print(condition_3)
print(condition_4)
"""
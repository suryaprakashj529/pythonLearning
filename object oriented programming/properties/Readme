# In Python, since there is no access modifiers (private, public or protected keywords) to denote an attribute as private you # 
#   prefix it with a _. The attribute can still be accessed and modified like all other attributes 
# but the _ prefix denotes that it should not be, this is a Python convention.


"""
In object oriented programming, getters are used to return the value of attributes 
while setters are used to set the value of attributes. 

Both allow you to hide complexity by providing a single method that can be used to 
validate data before assigning it to an attribute (setter) or 
mutate data (e.g. rounding a number) before returning it (getter). 

Setters may also constrain an attribute value by only allowing you to set it to something 
considered valid by the class (e.g. you can't set a negative salary for an employee).
"""

"""

class BankAccount:
    def __init__(self, account_holder_name):
        self.account_holder_name = account_holder_name
        self._balance = 0
    
    @property
    def balance(self):
        return round(self._balance)

    @balance.setter
    def balance(self, balance1):

        if 1 < int(float(balance1)) < 100000:
            self._balance = float(balance1)

            # This suite of tests is written to run against your code
# so that we can check its correctness.

import inspect
import unittest

from program import BankAccount


class TestProgram(unittest.TestCase):
    def test_case_1(self):
        self.assertTrue(inspect.isclass(BankAccount), "BankAccount should be a class.")

    def test_case_2(self):
        account = BankAccount("Tim")
        self.assertTrue(hasattr(account, "balance"), "A BankAccount should have a `balance` attribute.")

    def test_case_3(self):
        account = BankAccount("Tim")
        self.assertEqual(0, account.balance)

    def test_case_4(self):
        account = BankAccount("Clement")
        account.balance = -1
        self.assertEqual(0, account.balance)
        account.balance = "1.0"
        self.assertEqual(0, account.balance)
        account.balance = 100001
        self.assertEqual(0, account.balance)

    def test_case_5(self):
        account = BankAccount("Antoine")
        account.balance = 56.2
        self.assertEqual(56, account.balance)
        account.balance = 56.6
        self.assertEqual(57, account.balance)


"""

"""
class BankAccount:
    def __init__(self, account_holder_name):
        self.account_holder_name = account_holder_name
        self._balance = 0

    def get_balance(self):
        return round(self._balance)

    def set_balance(self, balance):

        if 1 < int(float(balance)) < 100000:
            self._balance = float(balance)

    property(get_balance, set_balance)



    # This suite of tests is written to run against your code
# so that we can check its correctness.

import inspect
import unittest

from program import BankAccount


class TestProgram(unittest.TestCase):
    def test_case_1(self):
        self.assertTrue(inspect.isclass(BankAccount), "BankAccount should be a class.")

    def test_case_2(self):
        account = BankAccount("Tim")
        self.assertTrue(hasattr(account, "get_balance"), "A BankAccount should have a `get_balance` method.")
        self.assertTrue(hasattr(account, "set_balance"), "A BankAccount should have a `set_balance` method.")

    def test_case_3(self):
        account = BankAccount("Tim")
        self.assertEqual(0, account.get_balance())

    def test_case_4(self):
        account = BankAccount("Clement")
        account.set_balance(-1)
        self.assertEqual(0, account.get_balance())
        account.set_balance("1.0")
        self.assertEqual(0, account.get_balance())
        account.set_balance(100001)
        self.assertEqual(0, account.get_balance())

    def test_case_5(self):
        account = BankAccount("Antoine")
        account.set_balance(56.2)
        self.assertEqual(56, account.get_balance())
        account.set_balance(56.6)
        self.assertEqual(57, account.get_balance())

"""
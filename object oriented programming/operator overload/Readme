# Dunder methods are just like other methods except they can be triggered in unique ways. 
# For example, the __init__ dunder method will automatically be called when instantiating a new object.

# In Python, when calling the str() function on an instance of a class 
# the __str__ method will be called. The __str__ is designed to return the string representation of an object.

# In Python, when calling the print() function on an instance of a class the __str__ method will be called. 
# This is because behind the scenes the print() function explicitly calls the str() function on all of it's arguments before printing them.

# In Python, the __repr__ method is used for debugging and displaying meaningful information about the object. 
# It is not designed to provide a string representation that is useful for printing.

class Vector:
    # Write your code here
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def __eq__(self, vector):
        return self.a == vector.a and self.b == vector.b

    def __repr__(self):
        return f"Vector({self.a}, {self.b})"

    def __add__(self, vector):
        new_a = self.a + vector.a
        new_b = self.b + vector.b
        return Vector(new_a, new_b)

    def __sub__(self, vector):
        new_a = self.a - vector.a
        new_b = self.b - vector.b
        return Vector(new_a, new_b)

    def __mul__(self, vector):
        return self.a * vector.a + self.b * vector.b
    
    
    



"""
# This suite of tests is written to run against your code
# so that we can check its correctness.

import unittest
import math

from program import Vector


class TestProgram(unittest.TestCase):
    def test_case_1(self):
        self.assertTrue(hasattr(Vector, '__repr__'))
        self.assertNotEqual(repr(Vector(1, 2)), repr(Vector(2, 1)))
        self.assertNotEqual(repr(Vector(1, 2)), repr(Vector(1, 3)))
        self.assertEqual(repr(Vector(1, 2)), repr(Vector(1, 2)))

    def test_case_2(self):
        self.assertTrue(hasattr(Vector, '__eq__'))
        self.assertNotEqual(Vector(1, 2), Vector(2, 1))
        self.assertNotEqual(Vector(1, 2), Vector(1, 3))
        self.assertEqual(Vector(1, 2), Vector(1, 2))

    def test_case_3(self):
        self.assertTrue(hasattr(Vector, '__add__'))
        v1 = Vector(4, 5)
        v2 = Vector(1, 2)
        self.assertEqual(Vector(5, 7), (v1 + v2))

    def test_case_4(self):
        self.assertTrue(hasattr(Vector, '__sub__'))
        v1 = Vector(4, 5)
        v2 = Vector(1, 2)
        self.assertEqual(Vector(3, 3), (v1 - v2))

    def test_case_5(self):
        self.assertTrue(hasattr(Vector, '__mul__'))
        v1 = Vector(3, 4)
        v2 = Vector(2, 7)
        self.assertEqual(34, v1 * v2)

"""
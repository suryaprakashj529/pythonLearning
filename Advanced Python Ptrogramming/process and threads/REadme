# Processes are executable programs that contain multiple threads. 
Threads execute part of a program and can be thought of as light weight processes. 
Threads share data and memory with other threads attached to their process.
 Operating systems have special thread management systems that can allow for multiple threads to be run at the same time.

 # Most modern day processors have more logical cores than they do physical cores due to a technology called hyperthreading (for intel CPU's) and clustered multithreading (for AMD CPU's). 
 # This allows each physical core to perform 2 operations at the same time, hence why a 4 core CPU with hyperthreading is said to have 8 logical cores. The number of logical cores determines how many operations can be performed in parallel.

# All operations performed by the CPU are a part of a thread and only one operation per thread can be ran at anytime. Therefore, a processor with 8 logical cores can run 8 threads at a time, or more specifically work on 8 operations in 8 different threads simultaneously.

""""
Threads running concurrently do not operate simultaneously, only one thread is ran at a time.
 You typically run threads concurrently (as opposed to in parallel) when the operations in one thread depend on results or computations from another or there is a chance a thread may be hanging (waiting on an external operation).

For example, you may divide an application in two concurrent threads as such. 
One thread sends a user an email and another handles the user interface or front-end of the application. 
Sending a user an email would rely on a network bound operation which is not controlled by the application or local machine. 
This means while the email is sending the current thread would be hanging, not performing any operations, simply waiting for the email to send. 
When the thread is idling the program would allow the user interface thread to run such that the user does not notice any delay or lag in the interface while the email is waiting to send. 
If this program was not divided into two threads then while the email was sending the user interface would be unusable as the current active thread would be waiting on an operation and couldn't perform any other tasks.

"""'
# In Python, an asynchronous program that does not explicitly define other threads runs in one thread. 
# The async paradigm enables better concurreny and simpler programs and is recommended to use over standard multithreading.

# The most straightforward definition of a coroutine is a function that can suspend its execution and resume later. 
# Coroutines are functions that can yield their control periodically or when in idle to allow other coroutines to run. This is how concurrency is implemented in a single thread.


async def add_one(coroutine):
    return_value = await coroutine()
    return return_value +1


    import asyncio


async def append_two_values(lst, value1, value2):
    lst.append(value1)
    await asyncio.sleep(0.5)
    lst.append(value2)


lst = []
# Write your code here.

async def main(lst):
    lst_new =[append_two_values(lst, 1, 4), append_two_values(lst, 3, 6), append_two_values(lst, 2, 5)]
    await asyncio.gather(*lst_new)

asyncio.run(main(lst))


def create_strings_from_characters(frequencies, string1, string2):
    can_create_string1 = can_create_frm_freq(frequencies, string1)
    can_create_string2 = can_create_frm_freq(frequencies, string2)

    if (not can_create_string1) or (not can_create_string2):
        if can_create_string1 or can_create_string2:
            return 1

        return 0
    # Write your code here.
    for ch in string1 + string2:
        if ch not in frequencies or frequencies[ch] == 0:
            return 1

        frequencies[ch] -= 1

    return 2


def can_create_frm_freq(frequencies, string):
    for ch in set(string):
        if string.count(ch) > frequencies.get(ch,0):
            return False

    return True
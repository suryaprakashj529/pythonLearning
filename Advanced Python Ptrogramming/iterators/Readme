string = "iterable"
string_itr = iter(string)
string.__iter__().__next__()
next(string_itr)

for char in string_itr:
    print(char)
    break

"""
This is because the iter function and the __iter__ method return new iterator objects.
 This means string_itr is a different iterator than string.__iter__().

Since these are different objects when we call next(string_itr) it advances that iterator to the next element which is t.
 That means when we continue looping through string_itr in the for loop we start at element t and immediately print it.
"""

"""
An iterator raises the StopIteration excpetion when it runs out of elements.
 This exception is raised from the iterators __next__ method.
"""

class Range:
    # Write your code here.
    def __init__(self, start, stop, step):
        self.start = start
        self.stop = stop
        self.step = step

    def __iter__(self):
        self.current_value = self.start
        return self

    def __next__(self):
        if self.step > 0 and self.current_value >= self.stop:
            raise StopIteration
        elif self.step < 0 and self.current_value <= self.stop:
            raise StopIteration

        self.current_value += self.step

        return self.current_value - self.step
    
    """
    # This suite of tests is written to run against your code
# so that we can check its correctness.

from typing import Iterator
import unittest

from program import Range


class TestProgram(unittest.TestCase):
    def test_case_1(self):
        iter = Range(1, 5, 1)
        self.assertTrue(hasattr(iter, "__iter__"))

    def test_case_2(self):
        iter = Range(1, 5, 1)
        self.assertEqual([1, 2, 3, 4], list(iter))

    def test_case_3(self):
        iter = Range(1, 1000000, 1)
        iter.__iter__()
        item = iter.__next__()
        self.assertEqual(1, item)

    def test_case_4(self):
        iter = Range(1, 10, 2)
        self.assertEqual([1, 3, 5, 7, 9], list(iter))

    def test_case_5(self):
        iter = Range(0, 21, 5)
        lst = []
        for i in iter:
            lst.append(i)
        expected = [0, 5, 10, 15, 20]
        self.assertEqual(expected, lst)

    def test_case_6(self):
        iter = Range(-2, -5, -1)
        self.assertEqual([-2, -3, -4], list(iter))

    def test_case_7(self):
        iter = Range(0, 5, -1)
        self.assertEqual([], list(iter))

    def test_case_8(self):
        iter = Range(-2, -5, 1)
        self.assertEqual([], list(iter))

    """
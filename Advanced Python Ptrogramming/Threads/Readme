import threading
from time import sleep

def t1():
    sleep(1)
    print("thread 1")

def t2():
    print("thread 2")
    sleep(1)

def t3():
    sleep(2)
    print("thread 3")

thread1 = threading.Thread(target=t1)
thread2 = threading.Thread(target=t2)
thread3 = threading.Thread(target=t3)
thread1.start()
thread2.start()
thread3.start()

"""
The code is executed as follows:

Three threads are created and thread1 is started.
The t1 function is called and executes sleep(1). This causes the thread to yield control back to the main thread.
The main thread starts thread2 and the t2 function is called. print("thread 2") is then executed followed by sleep(1). This causes the thread to yield control back to the main thread (recall, thread1 is still sleeping).
The main thread starts thread3 and the t3 function is called. sleep(2) is executed and control is yeilded back to the main thread (the only one not sleeping).
The main thread has no more code to execute and it waits for another thread to stop sleeping before yielding control to it.
thread1 finishes sleeping and prints "thread 1".
thread2 finishes sleeping and yields control back to the main thread as it is now finished.
The main thread waits for thread3 to finish sleeping and yields control to it where it prints "thread 3".
All threads are finished and program ends!
"""

import threading
from time import sleep
import math


def append_values(lst, values=[], delay=1):
    for value in values:
        lst.append(value)
        sleep(math.ceil(abs(delay)))


def append_integer(lst, integer):
    lst.append(integer)


lst = []

# Write your code here.
thread1 = threading.Thread(target=append_values, args=(lst, [1,3,5], 1))
thread2 = threading.Thread(target=append_integer, args=(lst, 4))
thread3 = threading.Thread(target=append_integer, args=(lst, 3))
thread1.start()
thread2.start()

thread1.join()
thread3.start()


import threading

RANGE_START = 0
RANGE_END = 1000

"""
At the end of the program, this variable needs to contain all of the powers
of 2 within the interval [RANGE_START, RANGE_END).
"""
powers_of_two = set()
set_lock = threading.Lock()

def is_power_of_two(x):
    if x == 0:
        return False
    return (x & (x - 1)) == 0


def find_powers_of_two(iter):
    # Write your code here.
    for x in iter:
        if is_power_of_two(x):
            set_lock.acquire()
            powers_of_two.add(x)
            print(type(powers_of_two))
            set_lock.release()

thread1 = threading.Thread(target=find_powers_of_two, args=(range(RANGE_START,250),))
thread2 = threading.Thread(target=find_powers_of_two, args=(range(250, 500),))
thread3 = threading.Thread(target=find_powers_of_two, args=(range(500, 750),))
thread4 = threading.Thread(target=find_powers_of_two, args=(range(750, RANGE_END),))


thread1.start()
thread2.start()
thread3.start()
thread4.start()

thread1.join()
thread2.join()
thread3.join()
thread4.join()